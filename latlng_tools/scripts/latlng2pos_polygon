#!/usr/bin/env python3
# -*- coding:utf-8 -*-

import rclpy

from rclpy.node import Node

from geometry_msgs.msg import PolygonStamped, Point32
from latlng_msgs.msg import PolygonStamped64

import math 
import pyproj

class LatLng2PosPolygon(Node):
    def __init__(self):
        super().__init__('latlng2pos_polygon')

        self.proj_transformer = pyproj.Transformer.from_crs('EPSG:4326', 'EPSG:2444', always_xy=True)

        self.map_frame = self.declare_parameter('map_frame_name', 'map').get_parameter_value().string_value
        self.origin_lat = self.declare_parameter('origin_lat', 33.0).get_parameter_value().double_value
        self.origin_lng = self.declare_parameter('origin_lng', 130.0).get_parameter_value().double_value
        self.angle_offset = self.declare_parameter('angle_offset', 0.0).get_parameter_value().double_value * math.pi / 180.0
        self.scale_offset = self.declare_parameter('scale_offset', 1.0).get_parameter_value().double_value

        self.sub_topic_name = self.declare_parameter('sub_topic_name', 'latlon').get_parameter_value().string_value
        self.pub_topic_name = self.declare_parameter('pub_topic_name', 'polygon').get_parameter_value().string_value

        use_polygon64 = self.declare_parameter('use_polygon64', False).get_parameter_value().bool_value

        if use_polygon64:
            #self.get_logger().info('Using PolygonStamped64')
            self.create_subscription(PolygonStamped64, self.sub_topic_name, self.callback_latlng2pos, 1)
        else:
            #self.get_logger().info('Using PolygonStamped')
            self.create_subscription(PolygonStamped, self.sub_topic_name, self.callback_latlng2pos, 1)

        self.pub_polygon = self.create_publisher(PolygonStamped, self.pub_topic_name, 1)

        self.get_logger().info('Node Start: latlng2pos_polygon')

        self.x_origin, self.y_origin = self.proj_transformer.transform(self.origin_lng, self.origin_lat)
    
    def latlng2pos(self, lat, lng):
        x_ref, y_ref = self.proj_transformer.transform(lng, lat)
        tx = math.cos(self.angle_offset) * (x_ref - self.x_origin) - math.sin(self.angle_offset) * (y_ref - self.y_origin)
        ty = math.sin(self.angle_offset) * (x_ref - self.x_origin) + math.cos(self.angle_offset) * (y_ref - self.y_origin)
        x = tx * self.scale_offset
        y = ty * self.scale_offset
        return x, y

    def callback_latlng2pos(self, data):
        pub_msg = PolygonStamped()
        pub_msg.header.stamp = data.header.stamp
        pub_msg.header.frame_id = self.map_frame

        i = 0
        for point in data.polygon.points:
            x, y = self.latlng2pos(point.y, point.x)
            self.get_logger().info('point[{}]: {:.6f}, {:.6f} -> {:.2f}, {:.2f}'.format(i, point.y, point.x, x, y))
            i = i + 1
            
            point_add = Point32()
            point_add.x = x
            point_add.y = y
            point_add.z = 0.0

            pub_msg.polygon.points.append(point_add)
        
        self.pub_polygon.publish(pub_msg)


if __name__ == '__main__':
    try:
        rclpy.init()
        node = LatLng2PosPolygon()
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info('Node Finish: latlng2pos_polygon')
        node.destroy_node()
        rclpy.shutdown()
