#!/usr/bin/env python3
# -*- coding:utf-8 -*-

import rclpy
from rclpy.node import Node

from sensor_msgs.msg import NavSatFix

from geometry_msgs.msg import Vector3
from visualization_msgs.msg import Marker
from std_msgs.msg import ColorRGBA

class Fix2Marker(Node):
    def __init__(self):
        super().__init__('fix2marker')

        sub_topic_name = self.declare_parameter('sub_topic_name', 'fix').get_parameter_value().string_value
        pub_topic_name = self.declare_parameter('pub_topic_name', 'marker').get_parameter_value().string_value

        self.marker_keep = self.declare_parameter('marker_keep', 100).get_parameter_value().integer_value
        self.id_now = 0

        marker_color_param = self.declare_parameter('marker_color_rgb', [0.0, 0.0, 0.0]).get_parameter_value().double_array_value
        self.marker_color = ColorRGBA()
        self.marker_color.r = marker_color_param[0]
        self.marker_color.g = marker_color_param[1]
        self.marker_color.b = marker_color_param[2]
        self.marker_color.a = 1.0

        marker_scale_param = self.declare_parameter('marker_scale', [1.0, 1.0, 1.0]).get_parameter_value().double_array_value
        self.marker_scale = Vector3()
        self.marker_scale.x = marker_scale_param[0]
        self.marker_scale.y = marker_scale_param[1]
        self.marker_scale.z = marker_scale_param[2]

        self.create_subscription(NavSatFix, sub_topic_name, self.callback_fix, 10)

        self.pub_marker = self.create_publisher(Marker, pub_topic_name, 10)

        self.get_logger().info('Node Start: fix2marker')


    def callback_fix(self, data):
        #self.get_logger().info('Callback Fix')
        print('Callback Fix')
        pub_msg = Marker()
        pub_msg.header.stamp = data.header.stamp
        pub_msg.header.frame_id = 'wgs84'

        pub_msg.id = self.id_now
        self.id_now = self.id_now + 1
        if self.id_now >= self.marker_keep:
            self.id_now = 0

        pub_msg.type = Marker.SPHERE
        pub_msg.action = Marker.ADD

        pub_msg.pose.position.x = data.longitude
        pub_msg.pose.position.y = data.latitude
        pub_msg.pose.position.z = 0.0

        pub_msg.scale = self.marker_scale
        pub_msg.color = self.marker_color

        self.pub_marker.publish(pub_msg)



if __name__ == '__main__':
    try:
        rclpy.init()
        node = Fix2Marker()
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info('Node Finish: fix2marker')
        node.destroy_node()
        rclpy.shutdown()
