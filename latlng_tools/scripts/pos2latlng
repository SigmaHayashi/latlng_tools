#!/usr/bin/env python3
# -*- coding:utf-8 -*-

#import rospy
import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from sensor_msgs.msg import NavSatFix

import math 
import pyproj

class Pos2LatLng(Node):
    def __init__(self):
        super().__init__('pos2latlng')
        
        #self.wgs84 = pyproj.Proj(init='EPSG:4326')
        #self.rect6 = pyproj.Proj(init='EPSG:2444')
        self.proj_transformer = pyproj.Transformer.from_crs('EPSG:2444', 'EPSG:4326', always_xy=True)

        #self.origin_lat = rospy.get_param('~origin_lat', 33.)
        #self.origin_lng = rospy.get_param('~origin_lng', 133.)
        #self.angle_offset = rospy.get_param('~angle_offset', 0.) * math.pi / 180.0
        #self.scale_offset = rospy.get_param('~scale_offset', 1.)
        self.origin_lat = self.declare_parameter('origin_lat', 33.0).get_parameter_value().double_value
        self.origin_lng = self.declare_parameter('origin_lng', 133.0).get_parameter_value().double_value
        self.angle_offset = self.declare_parameter('angle_offset', 0.0).get_parameter_value().double_value * math.pi / 180.0
        self.scale_offset = self.declare_parameter('scale_offset', 1.0).get_parameter_value().double_value

        self.pub_topic_name = self.declare_parameter('pub_topic_name', 'filtered_fix').get_parameter_value().string_value
        self.sub_topic_name = self.declare_parameter('sub_topic_name', 'odometry/filtered').get_parameter_value().string_value

        #self.pub_latlng = rospy.Publisher(rospy.get_param('~pub_topic_name', 'odometry/filtered_latlng'), NavSatFix, queue_size=10)
        #rospy.Subscriber(rospy.get_param('~sub_topic_name', 'odometry/filtered'), Odometry, self.callback_odom, queue_size=10)
        self.pub_latlng = self.create_publisher(NavSatFix, self.pub_topic_name, 10)
        self.create_subscription(Odometry, self.sub_topic_name, self.callback_odom, 10)
        
        self.get_logger().info('Node Start: Pos2LatLng')

        #self.x_origin, self.y_origin = pyproj.transform(self.wgs84, self.rect6, self.origin_lng, self.origin_lat)
        self.x_origin, self.y_origin = pyproj.Transformer.from_crs('EPSG:4326', 'EPSG:2444', always_xy=True).transform(self.origin_lng, self.origin_lat)

    def pos2latlng(self, x, y):
        #x_origin, y_origin = pyproj.transform(self.wgs84, self.rect6, self.origin_lng, self.origin_lat)

        tx = x / self.scale_offset
        ty = y / self.scale_offset

        #x_ref = x_origin + math.cos(self.angle_offset) * tx + math.sin(self.angle_offset) * ty
        #y_ref = y_origin + math.cos(self.angle_offset) * ty - math.sin(self.angle_offset) * tx

        x_ref = self.x_origin + math.cos(self.angle_offset) * tx + math.sin(self.angle_offset) * ty
        y_ref = self.y_origin + math.cos(self.angle_offset) * ty - math.sin(self.angle_offset) * tx

        #lng, lat = pyproj.transform(self.rect6, self.wgs84, x_ref, y_ref)
        lng, lat = self.proj_transformer.transform(x_ref, y_ref)

        #print('(x, y)     = ({:.2f}, {:.2f})'.format(x, y))
        #print('(lat, lng) = ({}, {})'.format(lat, lng))
        #print('-----')
        print('Pos -> LatLng : {0:.2f}, {1:.2f} -> {2}, {3}'.format(x, y, lat, lng))

        return lat, lng

    def callback_odom(self, data):

        lat, lng = self.pos2latlng(data.pose.pose.position.x, data.pose.pose.position.y)

        latlng = NavSatFix()
        #latlng.header.stamp = data.header.stamp
        #latlng.header.stamp = rospy.Time.now()
        latlng.header.stamp = self.get_clock().now().to_msg()
        latlng.latitude = lat
        latlng.longitude = lng

        self.pub_latlng.publish(latlng)


if __name__ == "__main__":
    '''
    rospy.init_node('Pos2LatLng', anonymous=True)
    rospy.loginfo("Pos2LatLng node Start")

    try:
        Pos2LatLng()
        rospy.spin()
    except rospy.ROSInterruptException:
        rospy.loginfo("Pos2LatLng node Finish")
    '''

    try:
        rclpy.init()
        node = Pos2LatLng()
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info('Node Finish: Pos2LatLng')
        node.destroy_node()
        rclpy.shutdown()
